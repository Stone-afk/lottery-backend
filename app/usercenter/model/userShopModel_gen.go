// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	 "looklook/common/globalkey"
)

var (
	userShopFieldNames          = builder.RawFieldNames(&UserShop{})
	userShopRows                = strings.Join(userShopFieldNames, ",")
	userShopRowsExpectAutoSet   = strings.Join(stringx.Remove(userShopFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userShopRowsWithPlaceHolder = strings.Join(stringx.Remove(userShopFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheLooklookUsercenterUserShopIdPrefix = "cache:looklookUsercenter:userShop:id:"
)

type (
	userShopModel interface {
		Insert(ctx context.Context, data *UserShop) (sql.Result, error)
		TransInsert(ctx context.Context, session sqlx.Session, data *UserShop) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserShop, error)
		Update(ctx context.Context, data *UserShop) error
		List(ctx context.Context, page, limit int64) ([]*UserShop, error)
		TransUpdate(ctx context.Context, session sqlx.Session, data *UserShop) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*UserShop, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserShop, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserShop, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*UserShop, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*UserShop, error)
		Delete(ctx context.Context, id int64) error
	}

	defaultUserShopModel struct {
		sqlc.CachedConn
		table string
	}

	UserShop struct {
		Id         int64        `db:"id"`
		UserId     int64        `db:"user_id"`
		Name       string       `db:"name"`
		Location   float64      `db:"location"`
		CreateTime time.Time    `db:"create_time"`
		UpdateTime time.Time    `db:"update_time"`
		DeleteTime sql.NullTime `db:"delete_time"`
	}
)

func newUserShopModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserShopModel {
	return &defaultUserShopModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_shop`",
	}
}

func (m *defaultUserShopModel) Delete(ctx context.Context, id int64) error {
	looklookUsercenterUserShopIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserShopIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, looklookUsercenterUserShopIdKey)
	return err
}

func (m *defaultUserShopModel) FindOne(ctx context.Context, id int64) (*UserShop, error) {
	looklookUsercenterUserShopIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserShopIdPrefix, id)
	var resp UserShop
	err := m.QueryRowCtx(ctx, &resp, looklookUsercenterUserShopIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userShopRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil,  ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserShopModel) Insert(ctx context.Context, data *UserShop) (sql.Result, error) {
	looklookUsercenterUserShopIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserShopIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userShopRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Location, data.DeleteTime)
	}, looklookUsercenterUserShopIdKey)
	return ret, err
}

func (m *defaultUserShopModel) TransInsert(ctx context.Context, session sqlx.Session, data *UserShop) (sql.Result, error) {
	looklookUsercenterUserShopIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserShopIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, userShopRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.UserId, data.Name, data.Location, data.DeleteTime)
	}, looklookUsercenterUserShopIdKey)
	return ret, err
}
func (m *defaultUserShopModel) Update(ctx context.Context, data *UserShop) error {
	looklookUsercenterUserShopIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserShopIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userShopRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserId, data.Name, data.Location, data.DeleteTime, data.Id)
	}, looklookUsercenterUserShopIdKey)
	return err
}

func (m *defaultUserShopModel) TransUpdate(ctx context.Context, session sqlx.Session, data *UserShop) error {
	looklookUsercenterUserShopIdKey := fmt.Sprintf("%s%v", cacheLooklookUsercenterUserShopIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userShopRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, data.UserId, data.Name, data.Location, data.DeleteTime, data.Id)
	}, looklookUsercenterUserShopIdKey)
	return err
}

func (m *defaultUserShopModel) List(ctx context.Context, page, limit int64) ([]*UserShop, error) {
	query := fmt.Sprintf("select %s from %s limit ?,?", userShopRows, m.table)
	var resp []*UserShop
	//err := m.conn.QueryRowsCtx(ctx, &resp, query, (page-1)*limit, limit)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, (page-1)*limit, limit)
	return resp, err
}

func (m *defaultUserShopModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}

func (m *defaultUserShopModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultUserShopModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultUserShopModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*UserShop, error) {

	builder = builder.Columns(userShopRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserShop
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserShopModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserShop, error) {

	builder = builder.Columns(userShopRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserShop
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserShopModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*UserShop, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(userShopRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*UserShop
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultUserShopModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*UserShop, error) {

	builder = builder.Columns(userShopRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserShop
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserShopModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*UserShop, error) {

	builder = builder.Columns(userShopRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*UserShop
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserShopModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultUserShopModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheLooklookUsercenterUserShopIdPrefix, primary)
}

func (m *defaultUserShopModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userShopRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserShopModel) tableName() string {
	return m.table
}
